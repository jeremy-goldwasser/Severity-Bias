d <- 75
delay_distr_med <- make_delay_distr(Mean=20, Sd=round(20*.9), d)
n_pts <- 200
n_ests <- n_pts - d
hosps <- readRDS(file.path(data_folder, "HHS.RData"))#_real_time
# t0 <- as.Date("2021-05-15")
t0 <- as.Date("2022-02-01")
hosp_start_idx <- which(names(hosps)==t0) # d+1
nhcs_hfrs_all <- readRDS(file.path(data_folder, "hfrs_rescaled_v2.RData"))
nhcs_hfr_dates <- as.Date(names(nhcs_hfrs_all))
chging_hfrs <- nhcs_hfrs_all[nhcs_hfr_dates %in% as.Date((t0-d):(t0-d+n_pts-1))]
# Only 1/4th the rise in magnitude
flatter_hfrs <- (chging_hfrs-min(chging_hfrs))*0.25+median(chging_hfrs)*.85
calc_nish_hfrs <- function(hosps, hfrs, delay_distr) {
est_hfrs_flat <- sapply(1:n_ests, function(t_idx) {
trailing_hosps <- hosps[(t_idx):(d+t_idx)]
trailing_hfrs <- hfrs[(t_idx):(d+t_idx)]
exp_deaths <- sum(rev(delay_distr)*trailing_hosps*trailing_hfrs)
denom <- sum(rev(delay_distr)*trailing_hosps)
exp_deaths/denom
})
return(est_hfrs_flat)
}
est_idx <- (d+1):n_pts
hosps_window <- hosps[(hosp_start_idx-d):(hosp_start_idx+n_ests-1)]
est_flat <- calc_nish_hfrs(hosps_window, flatter_hfrs, delay_distr_med)
est_chging <- calc_nish_hfrs(hosps_window, chging_hfrs, delay_distr_med)
sources <- c("Ground Truth", "Estimated"); types <- c("True (NHCS)", "Flatter")
df <- data.frame(t=t0+rep(1:n_ests, 4)-1,
HFRs=c(chging_hfrs[est_idx], flatter_hfrs[est_idx], est_chging, est_flat),
HFR=factor(rep(sources, each=n_ests*2), levels=sources),
Curve=factor(rep(rep(types, each=n_ests), 2), levels=types))
Plot <- ggplot(df, aes(x=t, y=HFRs, color=Curve, linetype=HFR)) +
geom_line() + ggtitle("HFR estimates by true HFR") + xlab("Date") + theme_bw() +
guides(linetype = guide_legend(order = 1), color = guide_legend(order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical") +
scale_color_manual(values = c("True (NHCS)" = "black", "Flatter" = "blue"))
Plot
ggsave(file.path(figure_folder, "Simulated", "toy_chging_hfr.pdf"),
plot = Plot, device = "pdf", width = 7, height = 7)
short_mean <- 12
long_mean <- 28
delay_distr_short <- make_delay_distr(Mean=short_mean, Sd=round(short_mean*.9), d)
delay_distr_long <- make_delay_distr(Mean=long_mean, Sd=round(long_mean*.9), d)
est_short <- calc_nish_hfrs(hosps_window, chging_hfrs, delay_distr_short)
est_med <- calc_nish_hfrs(hosps_window, chging_hfrs, delay_distr_med)
est_long <- calc_nish_hfrs(hosps_window, chging_hfrs, delay_distr_long)
sources <- c("Ground Truth", "Estimated")
# types <- c("Short (12)", "Med (20)", "Long (28)")  # Only keep the necessary types
types <- c("12", "20", "28")
# Keep Ground Truth in Type for plotting but handle later
df <- data.frame(
t = t0+rep(1:n_ests, 4)-1,
HFRs = c(chging_hfrs[est_idx], est_short, est_med, est_long),
HFR = factor(c(rep("Ground Truth", n_ests), rep("Estimated", n_ests*3)), levels = sources),
Type = factor(c(rep("Ground Truth", n_ests), rep(types, each=n_ests)), levels = c("Ground Truth", types))
)
delayPlot <- ggplot(df, aes(x = t, y = HFRs, linetype = HFR, color = Type)) +
geom_line(aes(group = interaction(HFR, Type))) +  # Group by HFR and Type
# Manually set color, exclude Ground Truth from legend
scale_color_manual(breaks = types,
values = c("Ground Truth" = "black", "12" = "green3", "20" = "red2", "28" = "blue")) +
ggtitle("HFR estimates by true delay distribution") +
labs(color="Delay mean") + xlab("Date") +
theme_bw() +
guides(linetype = guide_legend(order = 1), color = guide_legend(order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical")
dfDistr <- data.frame(t=rep(0:d, 3),
Delay=c(delay_distr_short, delay_distr_med, delay_distr_long),
Type=rep(types, each=d+1))
delay_inset <- ggplot(dfDistr, aes(x=t, y=Delay, color=Type)) + geom_line() + theme_bw() +
scale_color_manual(breaks = types,
values = c("Ground Truth" = "black", "12" = "green3", "20" = "red2", "28" = "blue")) +
theme(legend.position="none",
plot.title = element_text(size = 10),
axis.title = element_text(size = 10)) +
xlab("Days after primary event") + ylab("") + ggtitle("Delay distribution")
delayPlotFinal <- delayPlot + annotation_custom(ggplotGrob(delay_inset), xmin=t0, xmax=t0+60, ymax=.14)
ggsave(file.path(figure_folder, "Simulated", "toy_delay_distr.pdf"),
plot = delayPlotFinal, device = "pdf", width = 7, height = 7)
delayPlotFinal
max_obs <- max(hosps_window[est_idx]); min_obs <- min(hosps_window[est_idx])
sigmoid <- function(x) {1/(1+exp(-x))}
alt_hosps1 <- sigmoid(seq(-10, 5, length.out=n_pts))*(max_obs-min_obs) + min_obs
alt_hosps2 <- (1-sigmoid(seq(-10, 5, length.out=n_pts)))*(max_obs-min_obs) + min_obs
names(alt_hosps1) <- names(hosps_window)
names(alt_hosps2) <- names(hosps_window)
hfrs_true_hosps <- calc_nish_hfrs(hosps_window, chging_hfrs, delay_distr_med)
hfrs_alt_hosps1 <- calc_nish_hfrs(alt_hosps1, chging_hfrs, delay_distr_med)
hfrs_alt_hosps2 <- calc_nish_hfrs(alt_hosps2, chging_hfrs, delay_distr_med)
sources <- c("Ground Truth", "Estimated")
types <- c("True", "Rising", "Falling")
# Keep Ground Truth in Type for plotting but handle later
df <- data.frame(
t = t0+rep(1:n_ests, 4)-1,
HFRs = c(chging_hfrs[est_idx], hfrs_true_hosps, hfrs_alt_hosps1, hfrs_alt_hosps2),
HFR = factor(c(rep("Ground Truth", n_ests), rep("Estimated", n_ests*3)), levels = sources),
Type = factor(c(rep("Ground Truth", n_ests), rep(types, each=n_ests)), levels = c("Ground Truth", types))
)
hospPlot <- ggplot(df, aes(x = t, y = HFRs, linetype = HFR, color = Type)) +
geom_line(aes(group = interaction(HFR, Type))) +  # Group by HFR and Type
scale_color_manual(breaks = types,
values = c("Ground Truth" = "black", "Rising" = "green3", "True" = "red2", "Falling" = "blue")) +
ggtitle("HFR estimates by primary incidence") +
labs(color="Delay mean") + xlab("Date") +
theme_bw() +
guides(linetype = guide_legend(order = 1), color = guide_legend(order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical")
hospPlot
dfHosp <- data.frame(t=rep(as.Date(names(hosps_window)[est_idx]), 3),
Hosp=c(hosps_window[est_idx], alt_hosps1[est_idx], alt_hosps2[est_idx]),
Type=factor(rep(types, each=length(est_idx)), levels=types))
hosp_inset <- ggplot(dfHosp, aes(x=t, y=Hosp, color=Type, group=Type)) + geom_line() + theme_bw() +
scale_color_manual(breaks = types,
values = c("Rising" = "green3", "True" = "red2", "Falling" = "blue")) +
theme(legend.position="none",
plot.title = element_text(size = 10),
axis.title = element_text(size = 10)) +
xlab("") + ylab("") + ggtitle("Hospitalizations")
hosp_inset
hospPlotFinal <- hospPlot + annotation_custom(ggplotGrob(hosp_inset), xmin=t0, xmax=t0+60, ymax=.14)
hospPlotFinal
ggsave(file.path(figure_folder, "Simulated", "toy_chging_primary.pdf"),
plot = hospPlotFinal, device = "pdf", width = 7, height = 7)
# rescale <- function(hosps, hfrs) {
#   hfr_range <- max(hfrs)-min(hfrs)
#   shifted_hosps <- (hosps-min(hosps[est_idx]))/(max(hosps)-min(hosps))*hfr_range
#   shifted_hosps <- shifted_hosps + min(hfrs)
#   shifted_hosps
# }
# shifted_og_hosps <- rescale(hosps_window, chging_hfrs)
# shifted_alt_hosps1 <- rescale(alt_hosps1, chging_hfrs)
# shifted_alt_hosps2 <- rescale(alt_hosps2, chging_hfrs)
#
# sources <- c("GT HFRs", "Estimated", "Hospitalization")
# n_reps <- 3
# sources_df <- factor(c(rep(sources[1], n_ests), rep(sources[2], n_ests*n_reps),
#                        rep(sources[3], n_ests*n_reps)), levels=sources)
#
# types <- c("GT HFRs", "True Hosps", "Falling Hosps", "Rising Hosps")
# types_df <- factor(c(rep(types[1], n_ests), rep(rep(types[2:length(types)], each=n_ests),2)), levels=types)
# all_data <- c(chging_hfrs[est_idx], hfrs_true_hosps, hfrs_alt_hosps1, hfrs_alt_hosps2,
#                         shifted_og_hosps[est_idx], shifted_alt_hosps1[est_idx], shifted_alt_hosps2[est_idx])
# df <- data.frame(t=t0+rep(1:n_ests, 7)-1, #5
#                  data=all_data,
#                  HFR=sources_df,
#                  Type=types_df)
#
# Plot <- ggplot(df, aes(x=t, y=data, color=Type, linetype=HFR)) +
#   geom_line() + ggtitle("Changing Primary Incidence") +
#   ylab("HFR") + xlab("Date") +
#   theme_bw() + theme(legend.position = "bottom",
#                      legend.box="vertical", legend.margin=margin())
#
#   # scale_y_continuous(sec.axis = sec_axis(~ . * shift, name = "Hospitalizations"))
# Plot
# ggsave(file.path(figure_folder, "Simulated", "toy_chging_primary.pdf"),
#        plot = Plot, device = "pdf", width = 7, height = 7)
short_lag <- 14
long_lag <- 28
estDates <- nhcs_hfr_dates[(long_lag+1):length(nhcs_hfr_dates)]
est_hfrs_short <- nhcs_hfrs_all[nhcs_hfr_dates %in% (estDates-short_lag)]
est_hfrs_long <- nhcs_hfrs_all[nhcs_hfr_dates %in% (estDates-long_lag)]
gt_nhcs <- nhcs_hfrs_all[nhcs_hfr_dates %in% estDates]
HFRtypes <- c("GT", "Est, Short Delay", "Est, Long Delay")
df <- data.frame(Date=rep(estDates, 3),
HFR=c(gt_nhcs,est_hfrs_short,est_hfrs_long),
Method=factor(rep(HFRtypes, each=length(estDates)), levels=HFRtypes))
pConst <- ggplot(df, aes(x=Date, y=HFR, color=Method, linetype=Method)) +
geom_line() +
ggtitle("All deaths at same delay. True & Estimated HFRs.") +#Constant Primary Incidence.
theme_bw() +
theme(legend.position="bottom",
legend.title = element_blank())
plot(pConst)
ggsave(file.path(figure_folder, "Simulated", "sim_onehot.pdf"),
plot = pConst, device = "pdf", width = 7, height = 7)
n_dates <- 300
sim_hfrs <- seq(0.5, 0, length.out=n_dates)
xs <- seq(-9, 7, length.out=n_dates/2)
hosps <- (c(sigmoid(xs), rev(sigmoid(xs)))*9000 + 1000)
# plot(hosps)
days <- c(0, 10)
two_day_d <- max(days)
two_day_delay <- rep(0, two_day_d+1); two_day_delay[days+1] <- 0.5
est_indices <- (two_day_d+1):n_dates
exp_deaths <- sapply(est_indices, function(t) {
trailing_idx <- (t-two_day_d):t
trailing_hfrs <- sim_hfrs[trailing_idx]
hosps_in_trailing_window <- hosps[trailing_idx]
exp_deaths_t <- sum(hosps_in_trailing_window * trailing_hfrs * rev(two_day_delay))
})
conv_hfrs <- sapply(est_indices, function(t) {
trailing_idx <- (t-two_day_d):t
hosps_in_trailing_window <- hosps[trailing_idx]
deaths_t <- exp_deaths[t-two_day_d]
hfr_t <- deaths_t/sum(hosps_in_trailing_window * rev(two_day_delay))
})
lag <- mean(days)
# lag <- min(days)
lagged_hfrs <- sapply(est_indices, function(t) {
hfr_t <- exp_deaths[t-two_day_d]/hosps[t-lag]
})
n_est <- length(est_indices)
gt_hfrs <- sim_hfrs[est_indices]
plot(1:n_est, gt_hfrs, type="l", xlab="Date", ylab="HFR", main="True vs Est HFR",
ylim=c(min(conv_hfrs, lagged_hfrs, gt_hfrs), max(conv_hfrs, lagged_hfrs, gt_hfrs)))
lines(1:n_est, conv_hfrs, type="l", col="red")
lines(1:n_est, lagged_hfrs, type="l", col="blue")
lines(1:n_est, hosps[est_indices]/max(hosps)*max(sim_hfrs)*.75, type="l", col="green")
hosps_rescaled <- hosps[est_indices]/max(hosps)*max(sim_hfrs, lagged_hfrs, conv_hfrs)*1.5 #0.75
conv_bias <- conv_hfrs-gt_hfrs
conv_bias_rescaled <- conv_bias/max(conv_bias)*max(sim_hfrs)*.75
lagged_bias <- lagged_hfrs-gt_hfrs
trans_factor <- max(sim_hfrs) * 0.75 / max(conv_bias)
lagged_bias_rescaled <- lagged_bias/max(conv_bias)*max(sim_hfrs)*.75
data <- data.frame(
Date = rep(1:n_est, 4),
Value = c(gt_hfrs, hosps_rescaled, lagged_bias*trans_factor, conv_bias*trans_factor),
Line = factor(rep(c("True HFR", "Hospitalizations", "Lagged Bias", "Conv Bias"), each=n_est),
levels=c("True HFR", "Hospitalizations", "Lagged Bias", "Conv Bias"))
)
pChg <- ggplot(data, aes(x = Date, y = Value, colour = Line)) +
geom_line() +
labs(x = "Date", y = "HFR Level", title = "Changing Primary Incidence. True HFR and Estimation Bias.",
colour = "Legend") +
scale_colour_manual(values = c("True HFR" = "black", "Hospitalizations" = "green",
"Lagged Bias" = "blue", "Conv Bias" = "red")) +
theme_bw() + theme(legend.title=element_blank(), legend.position="bottom") +
ylim(range(c(min(conv_bias_rescaled, lagged_bias_rescaled, gt_hfrs),
max(conv_bias_rescaled, lagged_bias_rescaled, gt_hfrs)))) +
scale_y_continuous(sec.axis = sec_axis(~ . / trans_factor, name = "Bias Level"))
plot(pChg)
ggsave(file.path(figure_folder, "Simulated", "sim_chging_primary.pdf"),
plot = pChg, device = "pdf", width = 7, height = 7)
hosps <- readRDS(file.path(data_folder, "HHS_real_time.RData"))
nhcs_hfrs_all <- readRDS(file.path(data_folder, "hfrs_rescaled_v2.RData"))
shorter_mean <- 16
longer_mean <- 24
delay_distr_shorter <- make_delay_distr(Mean=shorter_mean, Sd=round(shorter_mean*.9), d)
delay_distr_true <- make_delay_distr(Mean=20, Sd=round(shorter_mean*.9), d)
delay_distr_longer <- make_delay_distr(Mean=longer_mean, Sd=round(longer_mean*.9), d)
first_death_date <- as.Date(max(names(nhcs_hfrs_all)[1], names(hosps)[1]))+d
last_death_date <- as.Date(min(names(nhcs_hfrs_all)[length(nhcs_hfrs_all)],
names(hosps)[length(hosps)]))
death_dates <- seq(first_death_date, last_death_date, by="day")
noiseless_deaths <- compute_noiseless_deaths(hosps, nhcs_hfrs_all, delay_distr_true, est_dates)
est_dates <- seq(as.Date("2021-11-01"), as.Date("2022-07-01"), by="day")
n_ests <- length(est_dates)
# 16. Could also use mean of delay distribution, 20
gt_hfrs <- nhcs_hfrs_all[names(nhcs_hfrs_all) %in% est_dates]
optimal_lag <- compute_optimal_lag(hosps, noiseless_deaths)
lagged_hfrs <- compute_lagged_hfrs(hosps, noiseless_deaths, l=optimal_lag, dates=est_dates)
conv_hfrs_oracle <- compute_conv_hfrs(hosps, noiseless_deaths, est_dates, delay_distr_true)
conv_hfrs_shorter <- compute_conv_hfrs(hosps, noiseless_deaths, est_dates, delay_distr_shorter)
conv_hfrs_longer <- compute_conv_hfrs(hosps, noiseless_deaths, est_dates, delay_distr_longer)
R_gamma_shorter <- compute_R_gammas(hosps, delay_distr_true, delay_distr_shorter, est_dates)
R_gamma_true <- compute_R_gammas(hosps, delay_distr_true, delay_distr_true, est_dates)
R_gamma_longer <- compute_R_gammas(hosps, delay_distr_true, delay_distr_longer, est_dates)
lagged_distr <- rep(0, d+1); lagged_distr[optimal_lag+1] <- 1
R_gamma_lagged <- compute_R_gammas(hosps, delay_distr_true, lagged_distr, est_dates)
sources <- c("Ground Truth", "Estimated")
types <- c("True", "Light-Tailed", "Heavy-Tailed", "Lagged")
# Keep Ground Truth in Type for plotting but handle later
df <- data.frame(
t = rep(est_dates, 5),
HFRs = c(gt_hfrs, conv_hfrs_oracle, conv_hfrs_shorter, conv_hfrs_longer, lagged_hfrs),
HFR = factor(c(rep("Ground Truth", n_ests), rep("Estimated", n_ests*4)), levels = sources),
Type = factor(c(rep("Ground Truth", n_ests), rep(types, each=n_ests)),
levels = c("Ground Truth", types))
)
mispPlot <- ggplot(df, aes(x = t, y = HFRs, linetype = HFR, color = Type)) +
geom_line(aes(group = interaction(HFR, Type))) +  # Group by HFR and Type
scale_color_manual(breaks = types,
values = c("Ground Truth" = "black", "Light-Tailed" = "green3", "True" = "red2",
"Heavy-Tailed" = "blue", "Lagged" = "magenta")) +
ggtitle("HFR estimates, misspecified delay distribution") +
labs(color="Delay distribution") + xlab("Date") +
theme_bw() + xlab("") +
guides(linetype = guide_legend(order = 1), color = guide_legend(order = 2)) +
scale_x_date(date_breaks = "1 month", labels = NULL) +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.text = element_text(size = 11),
#plot.title = element_text(size = 14),
axis.text.x = element_blank(),
legend.spacing.y = unit(0.5, "cm"),
legend.margin = margin(t = -10))
mispPlot
delayTypes <- c("Light-Tailed", "True", "Heavy-Tailed")
dfDistr <- data.frame(t=rep(0:d, 3),
Delay=c(delay_distr_shorter, delay_distr_true, delay_distr_longer),
Type=rep(delayTypes, each=d+1))
delay_inset <- ggplot(dfDistr, aes(x=t, y=Delay, color=Type)) +
geom_line() + theme_bw() +
scale_color_manual(breaks = delayTypes,
values = c("Light-Tailed" = "green3", "True" = "red2", "Heavy-Tailed" = "blue")) +
theme(legend.position="none",
plot.title = element_text(size = 10),
axis.title = element_text(size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
xlab("") +
# xlab("Days after primary event") +
ylab("") + ggtitle("Delay distribution")
mispPlotInlaid <- mispPlot +
annotation_custom(ggplotGrob(delay_inset), xmin=est_dates[1]-15, xmax=est_dates[1]+67,
ymin=.08, ymax=.148)
mispPlotInlaid
df2 <- data.frame(
t = rep(est_dates, 4),
Ratios = c(R_gamma_true, R_gamma_shorter, R_gamma_longer, R_gamma_lagged),
Type = factor(rep(types, each=n_ests), levels = types)
)
ratioPlot <- ggplot(df2, aes(x = t, y = Ratios, color = Type)) +
geom_line() +  # Group by HFR and Type
scale_color_manual(breaks = types,
values = c("Light-Tailed" = "green3", "True" = "red2",
"Heavy-Tailed" = "blue", "Lagged" = "magenta")) +
ggtitle(expression("Ratios A"^gamma)) +
theme_bw() + xlab("") +
scale_x_date(date_breaks = "1 month", labels = NULL) +
theme(legend.position = "none",
#plot.title = element_text(size = 14),
axis.text.x = element_blank())
ratioPlot
df3 <- data.frame(t = est_dates, Hosps=hosps[names(hosps) %in% est_dates])
hospPlot <- ggplot(df3, aes(x = t, y = Hosps)) +
geom_line() +  ggtitle("Hospitalizations") +
scale_x_date(date_breaks = "1 month",date_labels = "%b %Y") +
theme_bw() +
xlab("") +
theme(legend.position = "none",
)
hospPlot
full_misp_plot <- mispPlotInlaid / ratioPlot / hospPlot + plot_layout(heights = c(3, 1, 1))
full_misp_plot
ggsave(file.path(figure_folder, "Simulated", "toy_misp.pdf"),
plot = full_misp_plot, device = "pdf", width = 8, height = 7)
git_directory <- system("git rev-parse --show-toplevel", intern = TRUE)
data_folder <- file.path(git_directory, "Data", "National_Data")
code_folder <- file.path(git_directory, "Code", "Analysis")
figure_folder <- file.path(git_directory, "Figs")
source(file.path(code_folder, "helper_functions.R"))
library(tidyverse)
library(epidatr)
library(extraDistr)
library(patchwork)
nhcs_hfrs <- readRDS(file.path(data_folder, "hfrs_rescaled_v2.RData"))
hfr_dates <- as.Date(names(nhcs_hfrs))
hhs_hosps <- readRDS( file.path(data_folder, "HHS_finalized.RData"))
hosp_dates <- as.Date(names(hhs_hosps))
d <- 75
first_death_date <- max(min(hosp_dates), min(hfr_dates))+d
last_death_date <- min(max(hosp_dates), max(hfr_dates))
death_dates <- seq(first_death_date, last_death_date, by="day")
d <- 75
short_mean <- 12
long_mean <- 24
delay_distr_short <- make_delay_distr(Mean=short_mean, Sd=round(short_mean*.9), d)
delay_distr_long <- make_delay_distr(Mean=long_mean, Sd=round(long_mean*.9), d)
sim_deaths_short <- compute_noiseless_deaths(hhs_hosps, nhcs_hfrs, delay_distr_short, death_dates)
sim_deaths_long <- compute_noiseless_deaths(hhs_hosps, nhcs_hfrs, delay_distr_long, death_dates)
# lag_short <- compute_optimal_lag(hhs_hosps, sim_deaths_short)
lag_short <- round(sum(0:d*delay_distr_short))
# Estimate HFRs weekly, & offset to account for potential smoothing
# est_dates <- death_dates[seq(1+7*6, length(death_dates), by=7)]
est_dates <- death_dates[seq(1+7*6, length(death_dates), by=1)]
n_est <- length(est_dates)
hfrs_lagged_short <- compute_lagged_hfrs(hhs_hosps, sim_deaths_short, lag_short, w=1, dates=est_dates)
hfrs_conv_short <- compute_conv_hfrs(hhs_hosps, sim_deaths_short, est_dates, delay_distr_short, w=1)
gt_hfrs <- nhcs_hfrs[hfr_dates %in% est_dates]
HFRtypes <- c("Ground Truth", "Oracle Convolutional Ratio", "Lagged Ratio")
dfHFRshort <- data.frame(Date=rep(est_dates, length(HFRtypes)),
HFR=c(gt_hfrs, hfrs_conv_short, hfrs_lagged_short),
Method=factor(rep(HFRtypes, each=n_est), levels=HFRtypes))
ggplot(data=dfHFRshort, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("Simulation: Estimated vs True HFRs (NHCS)",
subtitle="Short Delay Distribution") +
scale_x_date(breaks = seq(as.Date("2020-10-01"), max(est_dates), by = "3 months"), date_labels = "%b %Y") +
xlab("") +
theme(legend.position="bottom",
legend.title=element_blank())
# Using correlation-maximizing lag doesn't improve; actually hurts a bit
# lag_long <- compute_optimal_lag(hhs_hosps, sim_deaths_long)
lag_long <- round(sum(0:d*delay_distr_long))
print(lag_long)
# Estimate HFRs weekly
hfrs_lagged_long <- compute_lagged_hfrs(hhs_hosps, sim_deaths_long, lag_long, w=1, dates=est_dates)
hfrs_conv_long <- compute_conv_hfrs(hhs_hosps, sim_deaths_long, est_dates, delay_distr_long, w=1)
dfHFRlong <- data.frame(Date=rep(est_dates, length(HFRtypes)),
HFR=c(gt_hfrs, hfrs_conv_long, hfrs_lagged_long),
Method=factor(rep(HFRtypes, each=n_est), levels=HFRtypes))
ggplot(data=dfHFRlong, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("Simulation: Estimated vs True HFRs (NHCS)",
subtitle="Long Delay Distribution") +
scale_x_date(breaks = seq(as.Date("2020-10-01"), max(est_dates), by = "3 months"), date_labels = "%b %Y") +
xlab("") +
theme(legend.position="bottom",
legend.title=element_blank())
flat_hfr <- 0.1
flat_hfrs <- rep(flat_hfr, length(nhcs_hfrs)); names(flat_hfrs) <- hfr_dates
sim_deaths_short_flat <- compute_noiseless_deaths(hhs_hosps, flat_hfrs, delay_distr_short, death_dates)
# lag_short <- compute_optimal_lag(hhs_hosps, sim_deaths_short_flat)
hfrs_lagged_short_flat <- compute_lagged_hfrs(hhs_hosps, sim_deaths_short_flat, lag_short, w=1, dates=est_dates)
hfrs_conv_short_flat <- compute_conv_hfrs(hhs_hosps, sim_deaths_short_flat, est_dates, delay_distr_short, w=1)
gt_hfrs_flat <- flat_hfrs[hfr_dates %in% est_dates]
dfHFRshort_flat <- data.frame(Date=rep(est_dates, length(HFRtypes)),
HFR=c(gt_hfrs_flat, hfrs_conv_short_flat, hfrs_lagged_short_flat),
Method=factor(rep(HFRtypes, each=n_est), levels=HFRtypes))
ggplot(data=dfHFRshort_flat, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("Simulation: Estimated vs True HFRs (Flat)") +
scale_x_date(breaks = seq(as.Date("2020-10-01"), max(est_dates), by = "3 months"), date_labels = "%b %Y") +
xlab("") +
theme(legend.position="bottom",
legend.title=element_blank())
sim_deaths_long_flat <- compute_noiseless_deaths(hhs_hosps, flat_hfrs, delay_distr_long, death_dates)
# lag_long <- compute_optimal_lag(hhs_hosps, sim_deaths_long_flat)
hfrs_lagged_long_flat <- compute_lagged_hfrs(hhs_hosps, sim_deaths_long_flat, lag_long, w=1, dates=est_dates)
hfrs_conv_long_flat <- compute_conv_hfrs(hhs_hosps, sim_deaths_long_flat, est_dates, delay_distr_long, w=1)
dfHFRlong_flat <- data.frame(Date=rep(est_dates, length(HFRtypes)),
HFR=c(gt_hfrs_flat, hfrs_conv_long_flat, hfrs_lagged_long_flat),
Method=factor(rep(HFRtypes, each=n_est), levels=HFRtypes))
ggplot(data=dfHFRlong_flat, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("Simulation: Estimated vs True HFRs (Flat)") +
scale_x_date(breaks = seq(as.Date("2020-10-01"), max(est_dates), by = "3 months"), date_labels = "%b %Y") +
xlab("") +
theme(legend.position="bottom",
legend.title=element_blank())
inv_hfrs <- (1/nhcs_hfrs)*min(nhcs_hfrs)*max(nhcs_hfrs)
sim_deaths_short_inv <- compute_noiseless_deaths(hhs_hosps, inv_hfrs, delay_distr_short, death_dates)
# lag_short <- compute_optimal_lag(hhs_hosps, sim_deaths_short_inv)
hfrs_lagged_short_inv <- compute_lagged_hfrs(hhs_hosps, sim_deaths_short_inv, lag_short, w=1, dates=est_dates)
hfrs_conv_short_inv <- compute_conv_hfrs(hhs_hosps, sim_deaths_short_inv, est_dates, delay_distr_short, w=1)
gt_hfrs_inv <- inv_hfrs[hfr_dates %in% est_dates]
dfHFRshort_inv <- data.frame(Date=rep(est_dates, length(HFRtypes)),
HFR=c(gt_hfrs_inv, hfrs_conv_short_inv, hfrs_lagged_short_inv),
Method=factor(rep(HFRtypes, each=n_est), levels=HFRtypes))
ggplot(data=dfHFRshort_inv, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("Simulation: Estimated vs True HFRs (Inverted)",
subtitle="Short Delay Distribution") +
scale_x_date(breaks = seq(as.Date("2020-10-01"), max(est_dates), by = "3 months"), date_labels = "%b %Y") +
xlab("") +
theme(legend.position="bottom",
legend.title=element_blank())
inv_hfrs <- (1/nhcs_hfrs)*min(nhcs_hfrs)*max(nhcs_hfrs)
sim_deaths_long_inv <- compute_noiseless_deaths(hhs_hosps, inv_hfrs, delay_distr_long, death_dates)
# lag_long <- compute_optimal_lag(hhs_hosps, sim_deaths_long_inv)
hfrs_lagged_long_inv <- compute_lagged_hfrs(hhs_hosps, sim_deaths_long_inv, lag_long, w=1, dates=est_dates)
hfrs_conv_long_inv <- compute_conv_hfrs(hhs_hosps, sim_deaths_long_inv, est_dates, delay_distr_long, w=1)
dfHFRlong_inv <- data.frame(Date=rep(est_dates, length(HFRtypes)),
HFR=c(gt_hfrs_inv, hfrs_conv_long_inv, hfrs_lagged_long_inv),
Method=factor(rep(HFRtypes, each=n_est), levels=HFRtypes))
ggplot(data=dfHFRlong_inv, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("Simulation: Estimated vs True HFRs (Inverted)",
subtitle="Long Delay Distribution") +
scale_x_date(breaks = seq(as.Date("2020-10-01"), max(est_dates), by = "3 months"), date_labels = "%b %Y") +
xlab("") +
theme(legend.position="bottom",
legend.title=element_blank())
# Offset analysis (weekly)
paste0("Offset, True HFRs with short delay: ", compute_optimal_lag(gt_hfrs, hfrs_conv_short), " days")
paste0("Offset, True HFRs with long delay: ", compute_optimal_lag(gt_hfrs, hfrs_conv_long), " days")
paste0("Offset, Inverted HFRs with short delay: ", compute_optimal_lag(gt_hfrs_inv, hfrs_conv_short_inv), " days")
paste0("Offset, Inverted HFRs with long delay: ", compute_optimal_lag(gt_hfrs_inv, hfrs_conv_long_inv), " days")
# titlesize <- 12
p1 <- ggplot(data=dfHFRshort, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("NHCS HFRs",
subtitle="Short Delay Distribution") +
xlab("") + theme_bw()
p2 <- ggplot(data=dfHFRlong, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("",subtitle="Long Delay Distribution") +
xlab("") + theme_bw()
p3 <- ggplot(data=dfHFRshort_inv, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("Inverted NHCS HFRs") +
xlab("") + theme_bw()
p4 <- ggplot(data=dfHFRlong_inv, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("") +#, subtitle="Long Delay Distribution"
xlab("") + theme_bw()
p5 <- ggplot(data=dfHFRshort_flat, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle(expression("Stationary HFR / Ratios A"^gamma)) +
scale_y_continuous(sec.axis = sec_axis(~ . / flat_hfr , name = expression("A"^gamma))) +
xlab("") + theme_bw()
p6 <- ggplot(data=dfHFRlong_flat, aes(x = Date, y = HFR, color = Method, linetype=Method)) +
geom_line() + labs(color = "HFR", linetype = "HFR") +
ggtitle("") +
scale_y_continuous(sec.axis = sec_axis(~ . / flat_hfr , name = expression("A"^gamma))) +
xlab("") + theme_bw()
Plot <- ((p1|p2) + plot_layout(tag_level = 'new')) /
((p3|p4) + plot_layout(tag_level = 'new')) /
((p5|p6) + plot_layout(tag_level = 'new')) +
plot_annotation(title = 'HFRs, Simulated Deaths', tag_levels = c('A', '1')) +
plot_layout(guides="collect") &
theme(legend.position = "bottom",
legend.title = element_blank())
Plot
ggsave(file.path(figure_folder, "Simulated", "simulated_results.pdf"), plot = Plot, device = "pdf", width = 9, height = 7)
# ggsave(file.path(figure_folder, "Simulated", "simulated_results_corr_lag.pdf"), plot = Plot, device = "pdf", width = 9, height = 7)
